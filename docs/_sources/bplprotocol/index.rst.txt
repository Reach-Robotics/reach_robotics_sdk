.. _comms_protocol:
Communications Protocol
========================

To get started with the Reach Robotics SDK, you'll first need to install 
the critical components package. This package includes our internal packet 
descriptions for the C and Python communication protocols. These packages 
are provided to customers who have purchased a PRO package for any Reach
Robotics product. For more information about PRO packages please contact 
our sales team (sales@reachrobotics.com). 

Downloading the SDK
--------------------

Clone the SDK from the Reach Robotics GitHub,

.. code-block:: bash

   cd ~/workspace/src
   git clone https://github.com/Reach-Robotics/reach_robotics_sdk.git

Accessing the SDK critical components
-------------------------------------

The SDK critical components can be download from the `Reach Robotics Website <https://reachrobotics.com/github-page/>`_.
Use the password provided to you at the time of your purchase or contact our `Sales Team <sales@reachrobotics.com/>`_ for 
more information.

.. image:: ../images/website_page.png
   :width: 600


1. Open the ZIP File.

2. Copy the ZIP File to the reach_robotics_sdk Folder

.. image:: ../images/instruction_install_sdk.png
   :width: 600

3. Merge The folders if prompted.

When completed, the folder structure should look similar to the structure below,

.. code-block:: none

    reach_robotics_sdk
    └── bplprotocol
        │   └── bplprotocol
        │      └── packetID.py
        └── C
            └── packetID.h

Getting Started With Python
---------------------------

To get started with the Reach Robotics python protocol install package ```bplprotocol```
locally,

.. code-block:: bash

   cd ./bplprotocol
   pip3 install .


.. note::
    If the package fails to install it is likely you have not installed the `Critical components <https://reachrobotics.com/github-page/>`_
    correctly. If this is the case, the following error will be raised during the installation "ImportError: Please install the Reach 
    Robotics SDK Critical Components. See https://reach-robotics.github.io/reach_robotics_sdk/bplprotocol/sdk_install.html". 
..


Usage
~~~~~

.. code-block:: python

    from bplprotocol import BPLProtocol, PacketID

    ###### Encode command and request packets

    # Encode a velocity command  of +3.0 mm/s to device 0x01 (Jaws) 
    data_bytes = BPLProtocol.encode_packet(0x01, PacketID.VELOCITY, BPLProtocol.encode_floats([3.0]))

    # Request velocity and position from the Wrist (device_id 0x02)
    data_bytes += BPLProtocol.encode_packet(0x02, PacketID.REQUEST, [PacketID.VELOCITY, PacketID.POSITION, PacketID.MODE]))

    ###### Decoding read data bytes

    # Option 1: Splitting and decoding manually.
    #     - Split the packet at with \x00 (null byte) as the separator. 
    #     - Incomplete_bytes contains bytes that have not seen \x00 to terminate it
    #     - Decode the bytes into a list of packets
    read_bytes, incomplete_bytes = BPLProtocol.packet_splitter(data_bytes) 
    packets = BPLProtocol.parse_packet(read_bytes)

    # Option 2: Reading packets via the packet reader
    #     - The packet reader will decode packets, and reconstruct incomplete packets
    packet_reader = PacketReader()
    packets = packet_reader.receive_bytes(data_bytes)

    # Each decoded packet is a 3 element tuple of device_id, packet_id, and data
    for packet in packets:
        device_id, packet_id, data = packet
        
        if packet_id == PacketID.POSITION:
            # Since position is a single floating point number. We use the decode floats method. 
            float_list = packet_id.decode_floats(data)
            print(f"I received a position packet from device: {device_id} with position: {float_list[0]}")
        elif packet_id == PacketID.MODE:
            # Since mode is a integer type. Converting the bytes list to a list will decode the data.
            data_list = list(data)
            print(f"I received a mode packet from device {device_id} with packet id: {packet_id} and {data_list[0]}")


Examples
~~~~~~~~
Some code examples using the bplprotocol can be found under bplprotocol/examples

.. toctree::
    :maxdepth: 3

    examples/requesting_joint_positions
    examples/setting_heartbeats
    examples/master_arm_passthrough
    examples/master_arm_information
    examples/force_torque_sensor
    examples/joint_control
    examples/simultaneous_joint_control
    examples/voltage_threshold_parameters


Module descriptions
~~~~~~~~~~~~~~~~~~~

.. automodule:: bplprotocol
   :members:

Getting Started With C/C++
---------------------------

To get started with the C/C++ communications protocol, ensure you have the files 
```bplprotocol.h``` and ```packetID.h``` in your file directory. 

Examples
~~~~~~~~~
Some code examples using the bplprotocol can be found under C/examples

.. toctree::
    :maxdepth: 1

    examples/encoding_packets
    examples/decoding_packets

Compilation and Execution
~~~~~~~~~~~~~~~~~~~~~~~~~~
You can compile and execute examples using the GCC tool chain as shown below. 

.. code-block:: bash

   cd ./C/examples/
   gcc decodePacketExample.c -I .. -o decode_example.o

   # To run the example
   ./decode_example.o